#!/bin/bash

# Daemonize - Convert any executable into a system service
# This script helps to create a systemd service for any executable.
# Usage: Run the script and follow the prompts to create a service.
# To remove a created service, see the instructions at the end of the script.

# Function to validate if a path exists
validate_path() {
    if [ ! -e "$1" ]; then
        echo "Error: Path '$1' does not exist."
        exit 1
    fi
}

# Function to get absolute path
get_absolute_path() {
    echo "$(cd "$(dirname "$1")" && pwd)/$(basename "$1")"
}

# Function to create service name from path
create_service_name() {
    local path="$1"
    local basename=$(basename "$path")
    echo "${basename// /-}.service"
}

# Function to get working directory path
get_working_dir() {
    local path="$1"
    echo "$(cd "$(dirname "$1")" && pwd)"
}

# Function to validate service name doesn't already exist
validate_service_name() {
    if [ -z "$1" ]; then
        echo "Error: No service name provided"
        exit 1
    fi
    local service_name="$1"
    if [ -f "/etc/systemd/system/${service_name}" ]; then
        echo "Error: Service '${service_name}' already exists at /etc/systemd/system/${service_name}"
        exit 1
    fi
}

# Main script
echo "ðŸ§ž Daemonize - Convert any executable into a system service"
echo "--------------------------------------------------------"

# Check if script is run as root
if [ "$EUID" -ne 0 ]; then 
    echo "Please run as root (use sudo)"
    exit 1
fi

# Get executable path
read -p "Enter path to executable: " EXECUTABLE_PATH
validate_path "$EXECUTABLE_PATH"
ABSOLUTE_PATH=$(get_absolute_path "$EXECUTABLE_PATH")

# Get initialization command
read -p "Enter initialization command (e.g., 'python3', 'node', 'go run', or leave empty): " INIT_COMMAND

# Get service description
read -p "Enter service description: " SERVICE_DESCRIPTION

# Get user to run service as
read -p "Enter user to run service as (default: root): " SERVICE_USER
SERVICE_USER=${SERVICE_USER:-root}

# Validate user exists
if ! id "$SERVICE_USER" >/dev/null 2>&1; then
    echo "Error: User '$SERVICE_USER' does not exist."
    exit 1
fi

# Create service name
SERVICE_NAME=$(create_service_name "$EXECUTABLE_PATH")
validate_service_name "$SERVICE_NAME"

# Get working directory
WORKING_DIR=$(get_working_dir "$EXECUTABLE_PATH")

# Create service file
cat > "/etc/systemd/system/$SERVICE_NAME" << EOF
[Unit]
Description=$SERVICE_DESCRIPTION
After=network.target

[Service]
Type=simple
User=$SERVICE_USER
WorkingDirectory=$WORKING_DIR
ExecStart=$INIT_COMMAND $ABSOLUTE_PATH
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

# Set permissions
chmod 644 "/etc/systemd/system/$SERVICE_NAME"

# Reload systemd
systemctl daemon-reload

echo "--------------------------------------------------------"
echo "âœ… Service created successfully!"
echo "Service name: $SERVICE_NAME"
echo ""
echo "To manage your service, use:"
echo "Start:   sudo systemctl start $SERVICE_NAME"
echo "Stop:    sudo systemctl stop $SERVICE_NAME"
echo "Enable:  sudo systemctl enable $SERVICE_NAME"
echo "Status:  sudo systemctl status $SERVICE_NAME"
echo "Logs:    sudo journalctl -u $SERVICE_NAME"
echo "--------------------------------------------------------"

# Ask if user wants to start and enable the service
read -p "Would you like to start the service now? (y/n): " START_SERVICE
if [ "$START_SERVICE" = "y" ] || [ "$START_SERVICE" = "Y" ]; then
    systemctl start "$SERVICE_NAME"
    echo "Service started."
    
    read -p "Would you like to enable the service to start on boot? (y/n): " ENABLE_SERVICE
    if [ "$ENABLE_SERVICE" = "y" ] || [ "$ENABLE_SERVICE" = "Y" ]; then
        systemctl enable "$SERVICE_NAME"
        echo "Service enabled to start on boot."
    fi
    
    # Show initial status
    echo ""
    echo "Current service status:"
    systemctl status "$SERVICE_NAME"
fi

# Instructions to remove the service
echo "--------------------------------------------------------"
echo "To remove the service, use the following commands:"
echo "Stop the service:   sudo systemctl stop $SERVICE_NAME"
echo "Disable the service: sudo systemctl disable $SERVICE_NAME"
echo "Remove the service file: sudo rm /etc/systemd/system/$SERVICE_NAME"
echo "Reload systemd: sudo systemctl daemon-reload"
echo "--------------------------------------------------------"